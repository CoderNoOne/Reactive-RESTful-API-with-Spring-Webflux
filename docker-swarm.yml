version: '3.9'

services:

  mongo1:
    image: mongo:4.4.4
    deploy:
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "30001" ]
    volumes:
      - ./data/mongo-1:/data/db
    ports:
      - 30001:30001
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 30s
      start_period: 5s
    extra_hosts:
      - "mongo1:127.0.0.1"
    networks:
      net:


  mongo2:
    image: mongo:4.4.4
    deploy:
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "30002" ]
    volumes:
      - ./data/mongo-2:/data/db
    ports:
      - 30002:30002
    extra_hosts:
      - "mongo2:127.0.0.1"
    networks:
      net:

  mongo3:
    image: mongo:4.4.4
    deploy:
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "30003" ]
    volumes:
      - ./data/mongo-3:/data/db
    ports:
      - 30003:30003
    extra_hosts:
      - "mongo3:127.0.0.1"
    networks:
      net:

  app:
    image: codernnoone/webflux_reactive_restflul_api
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"
    networks:
      - net

networks:
  net:
    driver: overlay


# use: docker stack deploy -c <filename> <appName>